{
    "cve": {
        "data_type": "CVE",
        "data_format": "MITRE",
        "data_version": "4.0",
        "CVE_data_meta": {
            "ID": "CVE-2022-49660",
            "ASSIGNER": "cve@kernel.org"
        },
        "problemtype": {
            "problemtype_data": [
                {
                    "description": []
                }
            ]
        },
        "references": {
            "reference_data": [
                {
                    "url": "https:\/\/git.kernel.org\/stable\/c\/01b86faa64b1f5aa04c0b3ca2001b0a8474f3006",
                    "name": "https:\/\/git.kernel.org\/stable\/c\/01b86faa64b1f5aa04c0b3ca2001b0a8474f3006",
                    "refsource": "",
                    "tags": []
                },
                {
                    "url": "https:\/\/git.kernel.org\/stable\/c\/274cb74da15ed13292fcec9097f04332eb3eea17",
                    "name": "https:\/\/git.kernel.org\/stable\/c\/274cb74da15ed13292fcec9097f04332eb3eea17",
                    "refsource": "",
                    "tags": []
                },
                {
                    "url": "https:\/\/git.kernel.org\/stable\/c\/43c8d33ce353091f15312cb6de3531517d7bba90",
                    "name": "https:\/\/git.kernel.org\/stable\/c\/43c8d33ce353091f15312cb6de3531517d7bba90",
                    "refsource": "",
                    "tags": []
                },
                {
                    "url": "https:\/\/git.kernel.org\/stable\/c\/5c03cad51b84fb26ccea7fd99130d8ec47949cfc",
                    "name": "https:\/\/git.kernel.org\/stable\/c\/5c03cad51b84fb26ccea7fd99130d8ec47949cfc",
                    "refsource": "",
                    "tags": []
                },
                {
                    "url": "https:\/\/git.kernel.org\/stable\/c\/856d1b8e6e826b5087f1ea3fdbabda3557d73599",
                    "name": "https:\/\/git.kernel.org\/stable\/c\/856d1b8e6e826b5087f1ea3fdbabda3557d73599",
                    "refsource": "",
                    "tags": []
                },
                {
                    "url": "https:\/\/git.kernel.org\/stable\/c\/9f83c8f6ab14bbf4311b70bf1b7290d131059101",
                    "name": "https:\/\/git.kernel.org\/stable\/c\/9f83c8f6ab14bbf4311b70bf1b7290d131059101",
                    "refsource": "",
                    "tags": []
                },
                {
                    "url": "https:\/\/git.kernel.org\/stable\/c\/b75cd218274e01d026dc5240e86fdeb44bbed0c8",
                    "name": "https:\/\/git.kernel.org\/stable\/c\/b75cd218274e01d026dc5240e86fdeb44bbed0c8",
                    "refsource": "",
                    "tags": []
                },
                {
                    "url": "https:\/\/git.kernel.org\/stable\/c\/efd9826d4c08abac7e8840757e3e1bfcf2876f70",
                    "name": "https:\/\/git.kernel.org\/stable\/c\/efd9826d4c08abac7e8840757e3e1bfcf2876f70",
                    "refsource": "",
                    "tags": []
                }
            ]
        },
        "description": {
            "description_data": [
                {
                    "lang": "en",
                    "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nxen\/arm: Fix race in RB-tree based P2M accounting\n\nDuring the PV driver life cycle the mappings are added to\nthe RB-tree by set_foreign_p2m_mapping(), which is called from\ngnttab_map_refs() and are removed by clear_foreign_p2m_mapping()\nwhich is called from gnttab_unmap_refs(). As both functions end\nup calling __set_phys_to_machine_multi() which updates the RB-tree,\nthis function can be called concurrently.\n\nThere is already a \"p2m_lock\" to protect against concurrent accesses,\nbut the problem is that the first read of \"phys_to_mach.rb_node\"\nin __set_phys_to_machine_multi() is not covered by it, so this might\nlead to the incorrect mappings update (removing in our case) in RB-tree.\n\nIn my environment the related issue happens rarely and only when\nPV net backend is running, the xen_add_phys_to_mach_entry() claims\nthat it cannot add new pfn <-> mfn mapping to the tree since it is\nalready exists which results in a failure when mapping foreign pages.\n\nBut there might be other bad consequences related to the non-protected\nroot reads such use-after-free, etc.\n\nWhile at it, also fix the similar usage in __pfn_to_mfn(), so\ninitialize \"struct rb_node *n\" with the \"p2m_lock\" held in both\nfunctions to avoid possible bad consequences.\n\nThis is CVE-2022-33744 \/ XSA-406."
                }
            ]
        }
    },
    "configurations": {
        "CVE_data_version": "4.0",
        "nodes": []
    },
    "impact": [],
    "publishedDate": "2025-02-26T07:01Z",
    "lastModifiedDate": "2025-02-26T07:01Z"
}